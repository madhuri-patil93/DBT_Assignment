
==================================================================================
/**************************Assignment –1*****************************************/
==================================================================================

create table SALESPEOPLE

(

Snum int(4),

Sname varchar(10),

City varchar(10),

Comm float(3,2)

);



Insert into  SALESPEOPLE

values

(1001, 'Peel', 'London', .12),

(1002,'Serres', 'San Jose', .13),

(1004, 'Motika', 'London', .11),

(1007 ,'Rifkin' ,'Barcelona', .15),

(1003 ,'Axelrod', 'New York', .10);
=========================================================================================================



create table CUSTOMERS

(

Cnum int(4),

Cname varchar(10),

City varchar(10),

Rating int(4),

Snum int(4)

);



Insert into  CUSTOMERS

values

(2001, 'Hoffman', 'London', 100 ,1001),

(2002 ,'Giovanni', 'Rome' ,200, 1003),

(2003 ,'Liu', 'San Jose' ,200, 1002),

(2004 ,'Grass', 'Berlin', 300 ,1002),

(2006 ,'Clemens', 'London', 100, 1001),

(2008 ,'Cisneros' ,'San Jose' ,300 ,1007),

(2007 ,'Pereira' ,'Rome', 100 ,1004);

==========================================================================================================




create table ORDERS

(

Onum int(4),

Amt float(7,2),

Odate date,

Cnum int(4),

Snum int(4)

);



Insert into  ORDERS

values

(3001 ,18.69, '1990-08-03' ,2008, 1007),

(3003, 767.19 ,'1990-08-03',2001 ,1001),

(3002, 1900.10, '1990-08-03', 2007 ,1004),

(3005, 5160.45, '1990-08-03',2003, 1002),

(3006, 1098.16, '1990-08-03',2008 ,1007),

(3009, 1713.23, '1990-08-04', 2002 ,1003),

(3007, 75.75 ,'1990-08-04', 2004 ,1002),

(3008, 4723.00, '1990-08-05', 2006,1001),

(3010, 1309.95, '1990-08-06', 2004 ,1002),

(3011, 9891.88, '1990-08-06', 2006 ,1001);

==============================================================================
*************Assignment4--Retrieving Information from Tables.*****************
==============================================================================

1.	1) Write a select command that produces the order number, amount, and date for all
	rows in the Orders table.	

	
	====>select Onum, Amt, Odate from orders;

2.	Write a query that produces all rows from the Customers table for which the
	salesperson’s number is 1001.
	
	====>select * from customers where Snum=1001;

3.	Write a query that displays the Salespeople table with the columns in the
	following order: city, sname, snum, comm.

	===>select * from Salespeople order by city,sname,snum,comm;

                       OR	
	select * from Salespeople order by 3,2,1,4;

4.	Write a select command that produces the rating followed by the name of each
	customer in San Jose.
		
	===>select Cname,Rating from customers where city="San Jose";

5.      Write a query that will produce the snum values of all salespeople (suppress the
	duplicates) with orders in the Orders table.

	===>select Distinct Sname from salespeople	




================================================================================================
*****************Assignment –5 Relational and Logical Operators.********************************
================================================================================================

1) 	Write a query that will give you all orders for more than Rs. 1,000.

====>	select * from Orders where Amt>1000;


	
2) 	Write a query that will give you the names and cities of all salespeople in
	London with a commission above .10.

=====>	select Sname ,city from Salespeople
where city="London" and Comm>0.10;



3) 	Write a query on the Customers table whose output will exclude all customers
	with a rating <= 100, unless they are located in Rome.

====>	select * from customers where not rating<=100 or city='Rome';
	
4)	What will be the output from the following query?
	

select * from Orders
	where 
	(Amt<1000 or NOT(odate='1990-10-03' AND cnum>2003));

	
=====>	Onum,   Amt,     Odate,        Cnum,  Snum
	3001	18.69	1990-08-03	2008	1007
	3003	767.19	1990-08-03	2001	1001
	3002	1900.10	1990-08-03	2007	1004
	3005	5160.45	1990-08-03	2003	1002
	3006	1098.16	1990-08-03	2008	1007
	3009	1713.23	1990-08-04	2002	1003
	3007	75.75	1990-08-04	2004	1002
	3008	4723.00	1990-08-05	2006	1001
	3010	1309.95	1990-08-06	2004	1002
	 3011	9891.88	1990-08-06	2006	1001

5) 	What will be the output of the following query?
	Select * from Orders
	where NOT ((odate = ‘1990-10-03’ OR snum
	>1006) AND amt >= 1500);


	Onum,   Amt,     Odate,        Cnum,  Snum
	3001	18.69	1990-08-03	2008	1007
	3003	767.19	1990-08-03	2001	1001
	3002	1900.10	1990-08-03	2007	1004
	3005	5160.45	1990-08-03	2003	1002
	3006	1098.16	1990-08-03	2008	1007
	3009	1713.23	1990-08-04	2002	1003
	3007	75.75	1990-08-04	2004	1002
	3008	4723.00	1990-08-05	2006	1001
	3010	1309.95	1990-08-06	2004	1002
	3011	9891.88	1990-08-06	2006	1001


6) 	What is a simpler way to write this query?
	Select snum, sname, city, comm From Salespeople
	where (comm > .12 OR comm <.14);
=====> select * from Orders



==================================================================================
/*************Assignment –6-Using Special Operators in Conditions.***************/
==================================================================================


1) 	Write two different queries that would produce all orders taken on October 3rd or 4th, 1990.
====>	select * from orders where Odate='1990-10-03' or Odate='1990-10-04';


2)	Write a query that selects all of the customers serviced by Peel or Motika.
	(Hint: the snum field relates the two tables to one another).
====>	select * from customers 
	where snum IN
	(select snum from salespeople where sname='Peel' or sname='Motika') ;



3)	 Write a query that will produce all the customers whose names begin with a letter
	from ‘A’ to ‘G’.
====>	select * from customers where cname regexp'^[a-g]';



4) 	Write a query that selects all customers whose names begin with the letter ‘C’.
====>	select * from customers where cname like 'c%';

5) 	Write a query that selects all orders except those with zeroes or NULLs in the amt field.
====>	


select * from orders where amt not in (select amt from orders where amt=0 or amt is null);


==========================================================================================
/*************Assignment –7-Summarizing Data with Aggregate Functions.******************/
===========================================================================================


1) 	Write a query that counts all orders for October 3.
====>	select count(*) from orders where Odate='1990-10-03';

2) 	Write a query that counts the number of different non-NULL city values in the Customers table.
====>	select count(city) from customers where city is not null;

3) 	Write a query that selects each customer’s smallest order.
====>	select min(Amt) from orders;

4) 	Write a query that selects the first customer, in alphabetical order, whose name begins with G.
====>	select Cname from customers where cname like 'G%' order by cname limit 1; 

5) 	Write a query that selects the highest rating in each city.
====>	select city, max(Rating) from customers group by city;

6) 	Write a query that counts the number of salespeople registering orders for each day. 
	(If a salesperson has more than one order on a given day, he or she should be counted only once.).
====>	select Snum, Odate,count(Odate) from orders group by Snum;

========================================================================================================
/*****************************Assignment –8-Formatting Query output.************************************/
========================================================================================================

1) 	Assume each salesperson has a 12% commission. Write a query on the orders table that will produce the order number, the salesperson number, and the amount of 
	the salesperson’s commission for that order.
====>	select Onum, Snum, (Amt*0.12) commision from orders;	

2) 	Write a query on the Customers table that will find the highest rating in each city. Put the output in this form:
	For the city (city), the highest rating is : (rating).
====>	select city, max(Rating) from customers group by city;

3) 	Write a query that lists customers in descending order of rating. Output the rating field first, followed by the customer’s name and number.
====>	select rating, cname, Cnum from customers order by Rating desc;

4) 	Write a query that totals the orders for each day and places the results in descending order.
====>	select Odate, sum(Amt) Amt from orders group by Odate order by Amt desc;

==========================================================================================================
/***********************Assignment – 9-Querying Multiple Tables at Once.**********************************/
==========================================================================================================

1) 	Write a query that lists each order number followed by the name of the customer who made the order.
====>	select onum, cname from customers , orders where customers.Cnum=orders.Cnum;

2) 	Write a query that gives the names of both the salesperson and the customer for each order along with the order number.
====>	select Sname, Cname, Onum  
	
from customers, salespeople, orders 

	where customers.Snum=salespeople.snum 
and customers.Snum=orders.snum;

3) 	Write a query that produces all customers serviced by salespeople with a commission above 12%. 
	Output the customer’s name, the salesperson’s name, and the salesperson’s rate of commission.
====>	select cname, sname, rating
from customers , salespeople 
	
where customers.Snum=salespeople.Snum 

	having comm>0.12;

4) 	Write a query that calculates the amount of the salesperson’s commission on each order by a customer with a rating above 100.
====>	select  Onum , (Amt*comm) Comm_Amount 
	from orders, salespeople 
	where orders.Snum=salespeople.Snum 


==============================================================================================================
/************************************Assignment – 10-Joining a Table to Itself.******************************/
===============================================================================================================
1) 	Write a query that produces all pairs of salespeople who are living in the same city. 
	Exclude combinations of salespeople with themselves as well as duplicate rows with the order reversed.
====>	select s1.sname, s2.sname , s1.city 
	
from salespeople s1, salespeople s2 

	where s1.city=s2.city and s1.sname>s2.sname ;

2) 	Write a query that produces the names and cities of all customers with the same rating as Hoffman.
====>	select Cname , City, rating 

	from customers 

	where rating=(select rating from customers where Cname='Hoffman');

===============================================================================================================
/**************************************Assignment – 11-Subqueries.********************************************/
===============================================================================================================

1) 	Write a query that uses a subquery to obtain all orders for the customer named Cisneros. Assume you do not know his customer number (cnum).
====>	select onum from orders where Cnum=(select Cnum From customers where Cname='Cisneros'); 

2) 	Write a query that produces the names and ratings of all customers who have above-average orders.
====>	select Cname , snum from customers where snum in (select snum from orders where amt >(select avg(amt) from orders));

3) 	Write a query that selects the total amount in orders for each salesperson for whom this total is greater than the amount of the largest order in the table.
====>	select snum, sum(amt) a from orders group by Snum having a>(select max(amt) from orders);


===================================================================================================================
/*******************************Assignment – 12-Using the operators IN, ANY, and ALL.*****************************/
===================================================================================================================

1) Write a query that selects all customers whose ratings are equal to or greater than ANY of Serres’.
====>	select * from customers where rating>= ANY (select  rating from customers where snum= (select snum from salespeople where sname='Serres'));

2) Write a query using ANY or ALL that will find all salespeople who have no customers located in their city.
====>	select * from salespeople where city not in (select city  from customers) ;	

3) Write a query that selects all orders for amounts greater than any for the customers in London.
====>	select * from orders where amt>ANY(select amt from orders where cnum in(select cnum from customers where city='London'));

4) Write the above query using MIN or MAX.
====>	


=============================================================================================================================================================================================
/****************************************************************Assignment – 13-Using the UNION clause.************************************************************************************/
=============================================================================================================================================================================================

1) 	Create a union of two queries that shows the names, cities, and ratings of all customers. 
	Those with rating of 200 or greater will also have the words “High Rating”, while the others will have the words “Low Rating”.
====>	select cname, city, rating , "High Rting" Status from customers where rating>=200
	 
		union

	select  cname , city, rating,"Low Rating" Status from customers where rating<200;  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) 	Write a command that produces the name and number of each salesperson and each customer with more than one current order. Put the results in alphabetical order.
====>	select Sname, salespeople.Snum, count(Onum) NoOfOrders 
	
from salespeople, orders 

	where salespeople.Snum=orders.Snum 

	group by salespeople.Snum;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) 	Form a union of three queries. Have the first select the snums of all salespeople in San Jose; the second, the cnums of all customers in San Jose; 
	and the third the onums of all orders on October 3. Retain duplicates between the last two queries but eliminate any redundancies between either of them and the first.
	(Note: in the sample tables as given, there would be no such redundancy. This is besides the point.)
====>	select snum from salespeople where city='San Jose'
			UNION
	select cnum from customers where city='San Jose'
			UNION
	select onum from orders where date='1990-10-03',


=============================================================================================================================================================================================
/******************************************************Assignment – 14-Entering, Deleting, and Changing Field Values.***********************************************************************/
=============================================================================================================================================================================================

1) Write a command that puts the following values, in their given order, into the salespeople table: city – San Jose, name – Blanco, comm – NULL, cnum – 1100.
====> 	INSERT INTO salespeople(city,Sname,comm,snum) 
	VALUES( 'San Jose','Blanco',null,110);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2) Write a command that removes all orders from customer Clemens from the Orders table.
====> 	delete  from orders where cnum=(select cnum from customers where cname='Clemens');


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) Write a command that increases the rating of all customers in Rome by 100.
====>	update customers
	
set rating=rating+100 
	
where city='Rome';
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4) Salesperson Serres has left the company. Assign her customers to Motika.
====>	update customers

	set snum=(select snum from salespeople where sname='Motika' )

	where snum=(select snum from salespeople where sname='Serres' );



=============================================================================================================================================================================================
/******************************************************Assignment – 15-Using Subqueries with DML Commands.**********************************************************************************/
=============================================================================================================================================================================================


1) 	Assume there is a table called Multicust, with all of the same column definitions as Salespeople.
 	Write a command that inserts all salespeople with more than one customer into this table.
====>	create table Multicast (select * from salespeople);

2) 	Write a command that deletes all customers with no current orders.
====>   DELETE from customers where cnum not in(select cnum from orders);

3) 	Write a command that increases by twenty percent the commissions of all salespeople with total orders above Rs. 3,000.
====>	select Comm+(comm*0.20) Updated_comm from salespeople where Snum in(Select snum from(select Snum, sum(Amt) from order group by snum ));


=============================================================================================================================================================================================
/******************************************************Assignment – 16-Creating Tables and Indexes.*****************************************************************************************/
=============================================================================================================================================================================================



1) Write a command that will enable a user to pull orders grouped by date out of the Orders table quickly.
====>	create index i_odate on Orders(Odate);

2) If the Orders table has already been created, how can you force the onum field to be unique (assume all current values are unique)?
====>	alter table Orders add UNIQUE(ONUM); 

3) Create an index that would permit each salesperson to retrieve his or her orders grouped by date quickly.
====>	create index i_odate on salesperson(Odate);


4) Let us assume that each salesperson is to have only one customer of a given rating, and that this is currently the case. Enter a command that enforces it.
====>create table customers2
	
(
	
Cnum int primary key,

	Cname varchar(20),

	City varchar(20),
	
Rating int ,
	
Snum int,
	
unique(Snum,Rating)
) ;

=============================================================================================================================================================================================
/******************************************************Assignment – 17-Constraining the Values of your data.*****************************************************************************************/
=============================================================================================================================================================================================

1) Create the Orders table so that all onum values as well as all combinations of cnum and snum are different from one another, and so that NULL values are excluded from the date field.
====>create table order1

	(
	
Onum int(4) primary key,

	Amt int(4),
	
Odate  date not null,
	
Cnum int(4),

	Snum int(4),
	
constraint uq_CnumSnum unique(Cnum,Snum)
	
);

2) Create the Salespeople table so that the default commission is 10% with no NULLS permitted, snum is the primary key, 
and all names fall alphabetically between A and M, inclusive (assume all names will be uppercase).
====>create table Salespeople1
	
(
	
Snum int ,

	Sname varchar(20),

	check(Sname regexp '^[A-M]'),

	City varchar(20),

	Comm float default 0.1
	
) ;

3) Create the Orders table, making sure that the onum is greater than the cnum, and the cnum is greater that the snum. Allow no NULLS in any of these three fields.
====>create table Orders1
	(
	Onum int(4) primary key,
	amt int(4),
	Odate date not null,
	
Cnum int(4) not null,

	Snum int(4) not null,
	check(Onum>Cnum and Cnum>Snum)
	);


